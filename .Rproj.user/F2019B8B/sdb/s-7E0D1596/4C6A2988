{
    "contents" : "#' @title calculate the similarity score in a specific cluster.\n#'\n#' @param node1, a nodes vector of net1\n#' @param node2, a nodes vector of net2\n#' @param cluster, cluster as a list of indices of samples belonging to the\n#' cluster.\n#' @param gene_sim, gene similarity matrix based on Gene Ontology\n\ncalc_cluster_score <- function(cluster,node1,node2,gene_sim){\n v1 <- intersect(node1,names(cluster))\n v2 <- intersect(node2,names(cluster))\n cluster_sim <- gene_sim[cluster,cluster]\n index1 <- match(v1,row.names(gene_sim),nomatch = 0)\n index2 <- match(v2,row.names(gene_sim),nomatch = 0) ## same as setdiff(cluster,index1)\n if (length(index1) && length(index2)){\n   LS1 <- sapply(index1,function(x)max(gene_sim[x,index2])) %>% sum\n   LS2 <- sapply(index2,function(x)max(gene_sim[x,index1])) %>% sum\n   LS <- (LS1 + LS2)/length(cluster)\n }\n else\n   LS <- 0\n}\n\n#' calculate the similarity scores between two networks\n#'\n#' @param net1,  a igaph network\n#' @param net2, same as net2\n#' @param ..., all other arguments are passed to apcluster\n\ncalc_twonet_score <- function(net1,net2, ...){\n  ## merge two networks\n  node1 <- V(net1)$name %>% str_replace('hsa:','')\n  node2 <- V(net2)$name %>% str_replace('hsa:','')\n  data(geneSimData)\n  node_index <- c(node1,node2) %>% unique %>%\n    match(row.names(geneSimData),nomatch = 0)\n  new_nodes <- row.names(geneSimData)[node_index]\n  edges1 <- get.data.frame(net1)\n  edges1$from <- str_replace(edges1$from,'hsa:','')\n  edges1$to <- str_replace(edges1$to,'hsa:','')\n  edges2 <- get.data.frame(net2)\n  edges2$from <- str_replace(edges2$from,'hsa:','')\n  edges2$to <- str_replace(edges2$to,'hsa:','')\n  new_edges <- rbind(edges1,edges2) %>%\n    filter(is.element(from,new_nodes) & is.element(to,new_nodes))\n  new_graph <- graph.data.frame(new_edges,vertices = new_nodes)\n\n  gene_sim <- geneSimData[node_index,node_index]\n  gene_cluster <- apcluster(s = gene_sim, p = mean(preferenceRange(gene_sim), ...))\n  ## cluster <- names(gene_cluster[[1]])\n  ## calculate the similarity score in a specific cluster\n  score <- sapply(1:length(gene_cluster),function(x)calc_cluster_score(gene_cluster[[x]],\n    node1,node2,gene_sim)) %>% mean\n  return(score)\n}\n\n#' @title randomize the network\n\nrandomize_net <- function(net){\n  genes <- row.names(geneSimData)\n  index <-  genes %>% length %>% sample(length(V(net)))\n  new_node <- genes[index] %>% paste0('hsa:',.)\n  V(net)$name <- new_node\n  return(net)\n}\n\n#' @title  standardize the similarity score\n\nstandardize_score <- function(net,refnet,nperm,...){\n  calc_random_score <- function(net,refnet,...){\n    random_net <- randomize_net(net)\n    if (class(refnet) == 'list')\n      random_score <- llply(refnet,function(x)calc_twonet_score(random_net,x,...))\n    else\n      random_score <- calc_twonet_score(random_net,refnet,...)\n    return(random_score)\n  }\n  random_score <- replicate(nperm,calc_random_score(net,refnet),simplify = FALSE)\n  return(random_score)\n}\n\n#' @title Calculating the similarity scores\n#'\n#' @description This function was used to calculate the similarity scores\n#' between a network and the reference network.\n#'\n#' @param  net, a network, can be represented as adj matrix, edge list, or in\n#' igraph class\n#'\n#' @param  refnet, a reference network list, one or more kegg pathway map, or\n#' customized networks, can be represented as adj matrix, edge list, or in\n#' igraph class\n#'\n#' @param nperm, number of random networks for similarity score standardization\n#'\n#'\n#' @return a similarity scoring vector,length is the same as the number of\n#' networks\n#'\n#' @export\n\n\ncalc_sim_score <- function(net,refnet,nperm = 100, plot = TRUE, ...){\n  if (class(net) != 'igraph')\n    stop(\"Please ensure your network is in graphNEL class\")\n  if (class(refnet) == 'list'){\n    sim_score <- llply(refnet,function(x)calc_twonet_score(net,x,...)) %>% unlist\n    random_score <- standardize_score(net,refnet,nperm, ...)\n    random_score_E <- sapply(random_score, function(x) x %>% unlist %>% mean)\n    random_score_SD <- sapply(random_score, function(x) x %>% unlist %>% sd)\n  }else{\n    sim_score <- calc_twonet_score(net,refnet,...)\n    random_score <- standardize_score(net,refnet,nperm, ...) %>% unlist\n    random_score_E <- mean(random_score)\n    random_score_SD <- sd(random_score)\n  }\n  sim <- (sim_score - random_score_E)/random_score_SD\n  if (is.null(names(refnet)))\n    sim_df <- data.frame(sim = sim, pathway = 1:length(sim))\n  else\n    sim_df <- data.frame(sim = sim, pathway = names(refnet))\n  if (plot)\n    print(ggplot(sim_df,aes(x=pathway,y=sim)) + geom_point(size=3) +\n      geom_segment(aes(xend=pathway,yend=0),size=1))\n  return(sim)\n}\n",
    "created" : 1437354154704.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "517541636",
    "id" : "4C6A2988",
    "lastKnownWriteTime" : 1437363385,
    "path" : "L:/work/NFP/R/calc_sim_score.R",
    "project_path" : "R/calc_sim_score.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}